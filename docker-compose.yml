# docker-compose.yml
version: "3.8"

x-postgres-env: &postgres-env
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_DB: app
  POSTGRES_SSLMODE: disable
  PGDATA: /var/lib/postgresql/data/pgdata

services:
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:12-alpine
    restart: on-failure
    environment: *postgres-env
    networks:
      - riotjs-nginx-example-network
    expose:
      - "5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data/pgdata

  adminer:
    container_name: adminer
    hostname: adminer
    image: adminer:latest
    restart: always
    expose:
      - "8080"
    depends_on:
      - postgres
    networks:
      - riotjs-nginx-example-network

  backend:
    build: ./backend
    container_name: backend
    hostname: backend
    image: riotjs-nginx-example-backend:master
    environment:
      <<: *postgres-env
      PORT: 5000
      SSL_CERT_PATH: /etc/letsencrypt/live/primary/cert.pem
      SSL_KEY_PATH: /etc/letsencrypt/live/primary/privkey.pem
    expose:
      - "5000"
    depends_on:
      - postgres
    networks:
      - riotjs-nginx-example-network
    volumes:
      - certbot-etc:/etc/letsencrypt

  nginx:
    build: ./frontend
    command: sh -c '
      wait-for.sh adminer:8080 &&
      wait-for.sh backend:5000 &&
      while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'
    container_name: nginx
    hostname: nginx
    image: riotjs-nginx-example-frontend:master
    networks:
      - riotjs-nginx-example-network
    ports:
      - "80:80"
      - "443:443"
    restart: on-failure
    depends_on:
      - adminer
      - backend
    volumes:
      - ${PWD}/nginx/prod.nginx.conf:/etc/nginx/conf.d/default.conf
      - ${PWD}/nginx/extras.conf:/etc/nginx/extras.conf
      - ${PWD}/nginx/cache_expiration.conf:/etc/nginx/cache_expiration.conf
      - certbot-etc:/etc/letsencrypt
      - certbot-www:/var/www/certbot
      - ${PWD}/scripts/wait-for.sh:/bin/wait-for.sh

  certbot:
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    container_name: certbot
    image: certbot/certbot
    networks:
      - riotjs-nginx-example-network
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-www:/var/www/certbot

networks:
  riotjs-nginx-example-network:
    driver: bridge

volumes:
  certbot-etc:
    name: "certbot-etc"
  certbot-www:
    name: "certbot-www"
  postgres-data:
